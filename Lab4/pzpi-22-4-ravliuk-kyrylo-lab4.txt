Харківський університет радіоелектроніки Факультет комп'ютерних наук
Кафедра програмної інженерії






ЗВІТ

з лабораторного заняття №4
з дисципліни  «Архітектура програмного забезпечення»
на тему: «Масштабування бекенда»






Виконав ст. гр ПЗПІ-22-4

Равлюк Кирило Станіславович



Перевірив

асистент кафедри ПІ 
Дашенков Дмитро Сергійович





Харків 2025
1 МЕТА РОБОТИ

Метою даної лабораторної роботи є демонстрація можливості масштабування бекенд-системи для забезпечення стабільної та ефективної роботи при високому навантаженні. 

2 ХІД РОБОТИ

У процесі виконання лабораторної роботи було реалізовано серверну частину веб-застосунку на основі фреймворку Django, а також впроваджено механізм горизонтального масштабування для забезпечення стабільної роботи системи при високому навантаженні. На початковому етапі було створено Django-проєкт, у якому всі чутливі дані — такі як ключі, параметри бази даних, конфігурації — були винесені у файл .env, що дозволяє підвищити безпеку та гнучкість налаштувань. Для зберігання даних було задеплоєно окремий екземпляр бази даних PostgreSQL, до якого серверна частина підключається через змінні оточення. Після цього виконано міграції моделей та перевірено працездатність API.
Далі було налаштовано деплой серверної частини у хмарне середовище Azure App Service. Код проєкту було завантажено на GitHub, після чого за допомогою GitHub Actions налаштовано CI/CD-процес: при кожному оновленні головної гілки автоматично виконується розгортання оновленої версії серверного застосунку на платформі Azure. Це забезпечує безперервну інтеграцію та автоматичну доставку змін у продуктивне середовище.
Ключовою частиною роботи стало налаштування масштабування. Було обрано горизонтальне масштабування, при якому система збільшує кількість інстансів серверу залежно від рівня навантаження. У середовищі Azure було задано правила автоматичного масштабування: збільшення кількості інстансів на одну одиницю відбувається, коли завантаження CPU перевищує 70% протягом 10 хвилин; навпаки, зменшення кількості інстансів виконується, коли завантаження процесора опускається нижче 30%. Це дозволяє системі адаптуватися до змін у навантаженні в режимі реального часу без участі адміністратора.
Для перевірки ефективності масштабування було проведено навантажувальне тестування за допомогою Apache JMeter. Створено тестовий сценарій, який моделює 300 одночасних GET-запитів до ключових ендпоінтів API, зокрема для отримання списку станцій та графіків розкладу. У ході тестування спостерігалося, як при зростанні навантаження Azure автоматично додає нові інстанси, забезпечуючи збереження швидкодії. Після завершення навантаження кількість інстансів поступово зменшується, що підтверджує правильну роботу налаштувань масштабування. Отримані результати свідчать про ефективність обраної стратегії та технічних рішень.


ВИСНОВКИ

У процесі виконання лабораторної роботи було реалізовано повноцінне горизонтальне масштабування серверної частини веб-застосунку, побудованої на базі Django. Для цього сервер було задеплоєно на Azure App Service, налаштовано безпечне зберігання конфігураційних змінних у .env файлі та підключено зовнішню базу даних PostgreSQL.
Автоматизація процесу деплою реалізована через GitHub Actions, що забезпечує CI/CD-підхід до оновлення коду на сервері. Однією з ключових частин роботи стало налаштування автоматичного масштабування, яке реагує на зміну навантаження: при перевищенні порогу використання CPU у 70% система автоматично збільшує кількість інстансів, а при зменшенні навантаження — зменшує їхню кількість.
Для перевірки коректності масштабування було проведено навантажувальне тестування за допомогою JMeter. Створено набір GET-запитів (300 потоків) до ключових API-ендпоінтів системи. Під час тестування зафіксовано правильну реакцію інфраструктури на підвищене навантаження — створення додаткових інстансів, що дозволило уникнути просідання продуктивності.

Результатом лабораторної роботи стала система, здатна автоматично адаптуватися до зміни рівня навантаження, забезпечуючи безперервну і стабільну роботу сервера. Це свідчить про ефективність обраної стратегії масштабування та правильність реалізованих технічних рішень. Такий підхід дозволяє забезпечити гнучкість і надійність системи при роботі у виробничому середовищі з непередбачуваним трафіком.

