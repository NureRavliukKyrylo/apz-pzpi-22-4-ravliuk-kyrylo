Харківський університет радіоелектроніки Факультет комп'ютерних наук
Кафедра програмної інженерії






ЗВІТ

з практичного заняття №1 
з дисципліни  «Архітектура програмного забезпечення»
на тему: «Патерни проєктування»






Виконав ст. гр ПЗПІ-22-4

Равлюк Кирило Станіславович



Перевірив

ст. викладач кафедри ПІ 
Сокорчук Ігор Петрович




Харків 2025

1 ІСТОРІЯ ЗМІН
 
№	Дата	Версія звіту	Опис змін та виправлень
1	24.03.2025	0.1	Написання тексту для презентації.
2	25.03.2025	0.1	Написання прикладу програмного коду для презентації
3	27.03.2025	0.1	Початок оформлення звіту, додано розділи «Завдання», «Опис виконаної роботи»
4	28.03.2025	0.1.1	Оформлено додаток Б, додано слайди  презентації
5	29.03.2025	0.1.2	Оформлено додаток В, додано програмний код
6	30.03.2025	0.1.3	Записано відеоролик та оформлено звіт до кінця

2 ЗАВДАННЯ

	Дослідити патерн проєктування Facade, визначити його ключові особливості, мету використання та основні переваги в архітектурі програмного забезпечення. Аналіз спрямований на виявлення проблем, які цей патерн допомагає вирішити, та вивчення його впливу на гнучкість, масштабованість і підтримуваність коду.
Завдання передбачає:
•	Опис структури Facade, пояснення його складових (Facade, Client, Subsystem Classes);
•	Аналіз UML-діаграми для наочного розуміння взаємодії компонентів;
•	Розгляд реальних сценаріїв використання, де Facade спрощує роботу з комплексними підсистемами;
•	Порівняння Facade із прямою взаємодією клієнта з підсистемами та оцінка його впливу на залежності між модулями;
•	Виявлення потенційних недоліків та ситуацій, коли використання цього патерну може бути зайвим або навіть шкідливим.
Завершальною частиною роботи є аналіз Facade у контексті сучасних розробницьких підходів (SOLID, принципи інкапсуляції та декомпозиції) та демонстрація його ефективності на прикладі програмного коду.

3 ОПИС ВИКОНАНОЇ РОБОТИ

У ході виконання практичного заняття було розглянуто патерн проєктування Facade, його основні принципи, структуру та застосування в програмному забезпеченні. Для детального пояснення цього патерну були підготовлені супровідні матеріали, зокрема презентація та відео, які висвітлюють ключові аспекти Facade, його роль у проєктуванні програмних систем та демонструють реальні приклади використання, а також фрагменти програмного коду.
Матеріали охоплюють теоретичний огляд, UML-діаграми, аналіз переваг і недоліків, а також демонструють роботу Facade на конкретних прикладах коду. Основний акцент зроблено на тому, як цей патерн спрощує взаємодію між клієнтом і підсистемами, зменшує складність коду та покращує його підтримуваність.
Facade забезпечує єдиний інтерфейс для роботи з групою складних підсистем, приховуючи їхню реалізацію, що дозволяє зменшити кількість прямих залежностей між модулями і спрощує підтримку програмного коду. Цей патерн складається з трьох ключових компонентів: фасад, що надає спрощений інтерфейс; підсистеми, які містять основну бізнес-логіку; і клієнт, який взаємодіє лише з фасадом, не знаючи про деталі реалізації підсистем.
Також було розглянуто кілька практичних сценаріїв використання Facade. Наприклад, у готельному сервісі рецепція виступає фасадом, який спрощує доступ до різних послуг готелю, таких як бронювання, обслуговування номерів і транспорт. У системах конвертації відео користувач отримує простий інтерфейс для роботи з файлами, тоді як внутрішня логіка опрацьовує формати і кодеки. У розумному будинку фасад забезпечує централізоване керування різними системами, такими як освітлення, безпека і клімат, без необхідності взаємодії з кожним окремим модулем.
У роботі також було надано приклади програмного коду, що демонструють реалізацію Facade на різних мовах програмування. Ці фрагменти ілюструють принципи побудови фасадного класу, взаємодії з підсистемами та оптимізації клієнтського коду.
Відеоматеріал доповнює слайди та містить пояснення UML-діаграми Facade, а також демонстрацію коду, що дозволяє глибше зрозуміти, як цей патерн спрощує структуру програмного забезпечення.
Основні переваги Facade включають зменшення зв'язності між модулями, спрощення коду та полегшення його підтримки, а також гнучкість, що дозволяє змінювати реалізацію підсистем без впливу на клієнтський код. Однак, як і будь-який інший підхід, Facade має потенційні недоліки, такі як надмірна логіка в фасаді, що може стати "вузьким місцем" у системі, ускладнюючи її підтримку, а також обмеження доступу до деталей підсистем, що може бути критичним у деяких випадках.
Загальний висновок підтверджує, що Facade є ефективним рішенням для великих програмних систем, де важливо приховати складність архітектури і створити зручний інтерфейс для взаємодії з модулями. Однак у простих програмах його використання може бути надмірним, а при неправильному проєктуванні навіть шкідливим.
Завдяки підготовленим матеріалам вдалося детально розкрити основні принципи роботи Facade, його вплив на архітектуру програмного забезпечення, можливі області застосування та реалізацію на практичних прикладах.






ВИСНОВКИ

У результаті виконання даної практичної роботи було розглянуто патерн проектування Facade. З’ясовано його переваги, зокрема спрощення взаємодії між клієнтом і підсистемами, зменшення складності коду та покращення підтримуваності програмного забезпечення. Описано недоліки, такі як можливе ускладнення підтримки через надмірну логіку у фасаді та обмеження доступу до деталей підсистем, що може бути критичним у деяких випадках. Наведено приклади використання Facade для спрощення інтерфейсів у таких системах, як готельні сервіси, системи конвертації відео та розумні будинки.






ДОДАТОК А
Посилання на відеозапис доповіді та текст хронологічного опису доповіді

Відеозапис доповіді на YouTube: https://youtu.be/NdFyftZF1ns
Хронологічний опис відеоролику:
00:00 - Привітання до глядачів. Тема презентаціїї «Патерн проєктування Facade». 
00:16 - Вступ. Що таке патерни проєктування. Стисло про патерн проєктування Facade. 
01:26 - Основна ідея.Коли використовувати.Проблеми, які вирішує Facade. 
02:32 - Структура патерна Facade: UML-діаграма. 
03:17 - Приклади використання фасад в програмному забезпеченні.Конвертація відео. 
03:53 - Приклади використання фасад в програмному забезпеченні.Музичний плеєр. 
04:30 - Приклади використання фасад в програмному забезпеченні.Система керування розумним будинком. 
05:18 - Приклад програмного коду «Бронювання квитків» без Facade та його недоліки. 
06:26 - Рішення «Бронювання квитків» за допомогою фасад та його переваги. 
07:15 - Переваги Використання Facade. 
07:34 - Недоліки Використання Facade. 
07:58 - Коли НЕ варто використовувати Facade. 
09:09 - Висновки доповіді.


ДОДАТОК Б
Слайди презентації доповіді

 
Рисунок Б.1 – Титульний слайд «Патерн проєктування Facade»

 
Рисунок Б.2 – Слайд презентації «Вступ»
 
Рисунок Б.3 – Слайд презентації «Основна ідея»

 
Рисунок Б.4 – Слайд презентації «Структура патерна Facade: UML-діаграма»



 
Рисунок Б.5 – Слайд презентації «Приклади використання фасад в програмному забезпеченні»

 
Рисунок Б.6 – Слайд презентації «Приклад програмного коду без використання Facade»
 
Рисунок Б.7 – Слайд презентації «Приклад програмного коду з використанням Facade»
 
Рисунок Б.8 – Слайд презентації «Переваги використання Facade»

 
Рисунок Б.9 – Слайд презентації «Недоліки використання Facade»

 
Рисунок Б.10 – Слайд презентації «Коли НЕ варто використовувати фасад?»


 
Рисунок Б.11 – Слайд презентації «Висновки»



ДОДАТОК В
Приклади програмного коду
Приклад без використання Facade:
     1  from sqlalchemy.orm import declarative_base, sessionmaker
     2  from sqlalchemy import Column, String, Integer, create_engine, ForeignKey
     3  from sqlalchemy.orm import relationship
     4
     5  # Створення базового класу для всіх ORM-моделей
     6  Base = declarative_base()
     7
     8  # Модель рейсу (Flight) — таблиця з інформацією про рейси
     9  class Flight(Base):
    10      __tablename__ = 'flights'
    11      flight_number = Column(String, primary_key=True)
    12      origin = Column(String)
    13      destination = Column(String)
    14      price = Column(Integer)
    15
    16  # Модель платежу (Payment) — таблиця з інформацією про платежі
    17  class Payment(Base):
    18      __tablename__ = 'payments'
    19      id = Column(Integer, primary_key=True, autoincrement=True)
    20      amount = Column(Integer)
    21      flight_number = Column(String, ForeignKey('flights.flight_number'))
    22      flight = relationship("Flight")
    23
    24  # Модель квитка (Ticket) — таблиця з оформленими квитками
    25  class Ticket(Base):
    26      __tablename__ = 'tickets'
    27      id = Column(Integer, primary_key=True, autoincrement=True)
    28      flight_number = Column(String, ForeignKey('flights.flight_number'))
    29      flight = relationship("Flight")
    30
    31  # Створення вбудованої SQLite бази даних в оперативній пам’яті
    32  engine = create_engine("sqlite:///:memory:", echo=True)
    33
    34  # Створення сесії для взаємодії з БД
    35  Session = sessionmaker(bind=engine)
    36  session = Session()
    37
    38  # Сервіс для пошуку рейсів
    39  class FlightSearch:
    40      def find_flights(self, origin, destination):
    41          print(f"Searching flights from {origin} to {destination}")
    42          return session.query(Flight).filter_by(origin=origin, destination=destination).all()
    43
    44  # Сервіс для обробки платежів
    45  class PaymentProcessing:
    46      def process_payment(self, amount, flight):
    47          print(f"Processing payment of ${amount} for flight {flight.flight_number}")
    48          payment = Payment(amount=amount, flight_number=flight.flight_number)
    49          session.add(payment)
    50          session.commit()
    51          return payment
    52
    53  # Сервіс для оформлення квитків
    54  class Ticketing:
    55      def issue_ticket(self, flight):
    56          print(f"Issuing ticket for {flight.flight_number}")
    57          ticket = Ticket(flight_number=flight.flight_number)
    58          session.add(ticket)
    59          session.commit()
    60          return ticket
    61
    62
    63  if __name__ == "__main__":
    64      # Створюємо таблиці у базі даних
    65      Base.metadata.create_all(engine)
    66
    67      # Ініціалізуємо окремі підсистеми
    68      search = FlightSearch()
    69      payment = PaymentProcessing()
    70      ticketing = Ticketing()
    71
    72      """
    73      На даний момент клієнтський код напряму взаємодіє з кожною підсистемою.
    74      Для реалізації Facade патерну можна створити окремий клас (наприклад, BookingFacade),
    75      який інкапсулює взаємодію між пошуком, оплатою і оформленням квитка.
    76      """
    77
    78      flights = search.find_flights("New York", "London")
    79      if flights:
    80          selected_flight = flights[0]
    81          print(f"Selected flight: {selected_flight.flight_number}")
    82          payment.process_payment(selected_flight.price, selected_flight)
    83          ticketing.issue_ticket(selected_flight)
    84      else:
    85          print("No flights found.")
Приклад з використанням Facade:
     1  from sqlalchemy.orm import declarative_base, sessionmaker
     2  from sqlalchemy import Column, String, Integer, create_engine, ForeignKey
     3  from sqlalchemy.orm import relationship
     4
     5  # Створення базового класу для всіх ORM-моделей
     6  Base = declarative_base()
     7
     8  # Модель рейсу (Flight) — таблиця з інформацією про рейси
     9  class Flight(Base):
    10      __tablename__ = 'flights'
    11      flight_number = Column(String, primary_key=True)
    12      origin = Column(String)
    13      destination = Column(String)
    14      price = Column(Integer)
    15
    16  # Модель платежу (Payment) — таблиця з інформацією про платежі
    17  class Payment(Base):
    18      __tablename__ = 'payments'
    19      id = Column(Integer, primary_key=True, autoincrement=True)
    20      amount = Column(Integer)
    21      flight_number = Column(String, ForeignKey('flights.flight_number'))
    22      flight = relationship("Flight")
    23
    24  # Модель квитка (Ticket) — таблиця з оформленими квитками
    25  class Ticket(Base):
    26      __tablename__ = 'tickets'
    27      id = Column(Integer, primary_key=True, autoincrement=True)
    28      flight_number = Column(String, ForeignKey('flights.flight_number'))
    29      flight = relationship("Flight")
    30
    31  # Створення вбудованої SQLite бази даних в оперативній пам’яті
    32  engine = create_engine("sqlite:///:memory:", echo=True)
    33
    34  # Створення сесії для взаємодії з БД
    35  Session = sessionmaker(bind=engine)
    36  session = Session()
    37
    38  # Сервіс для пошуку рейсів
    39  class FlightSearch:
    40      def find_flights(self, origin, destination):
    41          print(f"Searching flights from {origin} to {destination}")
    42          return session.query(Flight).filter_by(origin=origin, destination=destination).all()
    43
    44  # Сервіс для обробки платежів
    45  class PaymentProcessing:
    46      def process_payment(self, amount, flight):
    47          print(f"Processing payment of ${amount} for flight {flight.flight_number}")
    48          payment = Payment(amount=amount, flight_number=flight.flight_number)
    49          session.add(payment)
    50          session.commit()
    51          return payment
    52
    53  # Сервіс для оформлення квитків
    54  class Ticketing:
    55      def issue_ticket(self, flight):
    56          print(f"Issuing ticket for {flight.flight_number}")
    57          ticket = Ticket(flight_number=flight.flight_number)
    58          session.add(ticket)
    59          session.commit()
    60          return ticket
    61
    62  class BookingFacade:
    63      """
    64      Клас BookingFacade реалізує патерн Facade.
    65      Інкапсулює роботу з підсистемами: пошук рейсу, оплата, оформлення квитка.
    66      Дозволяє клієнту викликати лише один метод для бронювання.
    67      """
    68      def __init__(self):
    69          self.search = FlightSearch()
    70          self.payment = PaymentProcessing()
    71          self.ticketing = Ticketing()
    72
    73      def book_flight(self, origin, destination, amount):
    74          flights = self.search.find_flights(origin, destination)
    75          if flights:
    76              selected_flight = flights[0]
    77              self.payment.process_payment(amount, selected_flight)
    78              self.ticketing.issue_ticket(selected_flight)
    79              print("Booking successful!")
    80          else:
    81              print("No flights available.")
    82
    83  if __name__ == "__main__":
    84      facade = BookingFacade()
    85      facade.book_flight("New York", "London", 500)


