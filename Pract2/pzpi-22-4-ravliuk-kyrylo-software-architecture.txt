Харківський університет радіоелектроніки Факультет комп'ютерних наук
Кафедра програмної інженерії






ЗВІТ

з практичного заняття №2
з дисципліни  «Архітектура програмного забезпечення»
на тему: «Архітектура відомих програмних систем»






Виконав ст. гр ПЗПІ-22-4

Равлюк Кирило Станіславович



Перевірив

ст. викладач кафедри ПІ 
 Сокорчук Ігор Петрович



Харків 2025

1 ІСТОРІЯ ЗМІН
 
№	Дата	Версія звіту	Опис змін та виправлень
1	23.04.2025	0.1	Написання тексту для презентації.
2	24.04.2025	0.1.1	Початок оформлення звіту, додано розділи «Завдання», «Опис виконаної роботи»
4	26.04.2025	0.1.2	Створено презентацію та оформлено додаток Б
6	04.05.2025	0.1.3	Записано відеоролик та оформлено звіт до кінця

2 ЗАВДАННЯ

	Дослідити архітектуру програмної системи Twitch, визначити її основні принципи побудови, ключові складові та підходи до реалізації. Розглянути структуру цієї архітектури та її роль у забезпеченні масштабованості, відмовостійкості та високої доступності для глобальної платформи прямих відеотрансляцій. Проаналізувати технічні рішення, що лежать в основі функціонування системи, зокрема організацію передавання відео в реальному часі, роботу систем персоналізованих рекомендацій і механізми управління даними, а також оцінити їхній вплив на загальну продуктивність і надійність платформи. Дослідити практичні аспекти масштабування та подолання технічних викликів, що виникають під час реальної роботи системи, з метою продемонструвати, як архітектурні рішення Twitch забезпечують її стабільну та ефективну роботу як однієї з провідних платформ для трансляцій у режимі реального часу.

3 ОПИС ВИКОНАНОЇ РОБОТИ

У ході виконання практичного заняття було розглянуто архітектуру програмної платформи Twitch, її основні компоненти, технічні рішення, особливості реалізації потокової трансляції відео та специфіку функціонування в умовах високого навантаження. Для пояснення архітектурних принципів і підходів було підготовлено супровідні матеріали — презентацію та відео, що висвітлюють ключові аспекти побудови розподілених систем, використання хмарних технологій і мікросервісного підходу на прикладі Twitch.  Посилання на відеозапис подано в Додатку А, а слайди до презентації — у Додатку Б.
Архітектура програмної системи Twitch являє собою складну розподілену структуру, що базується на мікросервісному підході та хмарних технологіях. Вона інтегрує сучасні технічні рішення для забезпечення високої масштабованості, стійкості та доступності платформи для глобальної аудиторії. Основною метою архітектури є підтримка безперервної трансляції відео в реальному часі, забезпечення інтерактивності та стабільної роботи за умов значного навантаження.
Twitch як провідна платформа для потокових трансляцій потребує застосування потужних обчислювальних ресурсів, оптимізованих систем доставки відеоконтенту та ефективних засобів обробки і аналізу даних. Архітектура враховує потреби глядачів і стрімерів з різних регіонів, забезпечуючи високу якість відео навіть при нестабільному інтернет-з’єднанні.
Система повинна гарантувати низький рівень затримок, високу доступність - та здатність обробляти одночасні запити від мільйонів користувачів. Реалізація таких вимог досягається за рахунок хмарної інфраструктури, яка забезпечує гнучке масштабування та стійкість до збоїв.
Архітектура Twitch побудована на основі мікросервісної моделі, де кожен сервіс виконує окрему функцію — від обробки відеопотоків і зберігання відео до керування чатом, автентифікації користувачів та аналітики. Для передачі відео використовуються сучасні технології кодування (H.264, H.265) і протоколи (RTMP, HLS), що дозволяє адаптувати якість трансляцій до можливостей мережі користувача. Значну роль відіграє глобальна мережа доставки контенту (CDN), яка розташовує вузли у різних географічних регіонах для зниження затримки.
Компонентна структура включає фронтенд (веб-інтерфейс і мобільні застосунки), серверну частину, бази даних, системи модерації та рекомендацій. Веб-інтерфейс реалізовано з використанням React, мобільні клієнти — на основі нативних фреймворків. Серверна частина використовує мови Go, Python і Node.js для обробки подій, керування сеансами трансляцій та взаємодії з внутрішніми API.
Для обробки та зберігання даних застосовуються масштабовані бази даних, зокрема Amazon Aurora та Redis. Зберігання відеофайлів здійснюється у хмарному сховищі Amazon S3, що дозволяє ефективно управляти великими обсягами контенту.
Обробка подій у реальному часі реалізується за допомогою Apache Kafka, а аналітичні дані про перегляди, активність у чаті та взаємодію з контентом опрацьовуються через Apache Flink і Snowflake. Ці системи підтримують роботу алгоритмів рекомендацій і дають змогу оптимізувати завантаження ресурсів.
Для контейнеризації сервісів застосовуються Docker і Kubernetes, що забезпечують гнучкість у розгортанні та масштабуванні. AWS Auto Scaling автоматично змінює кількість обчислювальних ресурсів відповідно до навантаження. Додатково застосовується підхід Chaos Engineering для перевірки надійності, що передбачає моделювання збоїв з метою виявлення слабких місць системи.
Серед основних викликів, з якими стикається Twitch, варто виділити необхідність обробки великого потоку даних у реальному часі, складність координації численних мікросервісів, а також потребу в низькій затримці під час взаємодії між стрімером та глядачем. Також значним фактором залишаються витрати на інфраструктуру, пов’язані з високим навантаженням на хмарні ресурси.
Перспективи розвитку Twitch передбачають активніше впровадження технологій штучного інтелекту для автоматичної модерації вмісту, покращення систем рекомендацій та персоналізації, а також оптимізацію трансляцій для нових поколінь мереж, зокрема 5G. Особливу увагу приділено розвитку інтерактивного контенту та гейміфікованих функцій, які підвищують залучення аудиторії.
Таким чином, архітектура Twitch є зразком сучасної розподіленої програмної системи, яка поєднує мікросервісну модель, хмарні обчислення та високотехнологічні інструменти для забезпечення стабільної роботи, швидкої взаємодії та масштабованості. Її розвиток спрямовано на подальше вдосконалення якості користувацького досвіду та підвищення технічної ефективності всієї платформи.


ВИСНОВКИ

У результаті виконання даної практичної роботи було розглянуто архітектуру програмної платформи Twitch. З’ясовано її ключові особливості, зокрема застосування мікросервісної архітектури, використання хмарних технологій та механізмів масштабування для забезпечення стабільної роботи під високим навантаженням. 
Описано переваги такої архітектури, як гнучкість, модульність, спрощення оновлень окремих компонентів і висока відмовостійкість системи. Водночас виявлено недоліки, зокрема складність оркестрації мікросервісів, потребу в розвиненій інфраструктурі моніторингу та потенційні затримки при взаємодії між сервісами. Наведено приклади реалізації потокової трансляції, обробки чату, балансування навантаження і зберігання відео, що дозволяють глибше зрозуміти принципи побудови великих розподілених систем на прикладі Twitch.


ДОДАТОК А
Посилання на відеозапис доповіді та текст хронологічного опису доповіді

Відеозапис доповіді на YouTube: https://youtu.be/EcFmlkpgkqE
Хронологічний опис відеоролику:
00:00 - Привітання до глядачів. Тема презентаціїї «Архітектура програмної системи Twitch».
00:14 - Вступ. Розповідь що таке Twitch та для чого призначена. Опис ключових вимог до системи.
00:47 - Опис технологічного стеку для фронтенду (Web та Mobile).
01:13 - Опис технологічного стеку для бекенду.
01:48 - Сховища зберігання даних у системі Twitch.
02:26 - Опис мікросервісної архітектури Twitch.Розповідь про основні сервіси.
05:06 - Розповідь як обробляється відеопотік у Twitch. 
05:55 - Використання аналітики та Machine Learning у Twitch. 
06:37 - Інфраструктура Twitch та використання CI/CD підходу. 
07:20 - Висновки доповіді.



ДОДАТОК Б
Слайди презентації доповіді

 
Рисунок Б.1 – Титульний слайд «Архітектура програмної системи Twitch»

 
Рисунок Б.2 – Слайд презентації «Вступ»

 
Рисунок Б.3 – Слайд презентації «Технологічний стек фронтенду»

 
Рисунок Б.4 – Слайд презентації «Технологічний стек бекенду»


 
Рисунок Б.5 – Слайд презентації «Сховища та черги»

 
Рисунок Б.6 – Слайд презентації «Мікросервісна архітектура Twitch»

 
Рисунок Б.7 – Слайд презентації «Обробка відеопотоку»
 
Рисунок Б.8 – Слайд презентації «Аналітика та Machine Learning»

 
Рисунок Б.9 – Слайд презентації «Інфраструктура та CI/CD»

 
Рисунок Б.10 – Слайд презентації «Висновки»



